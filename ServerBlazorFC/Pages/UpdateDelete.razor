@page "/updel/{id}/{mode}"
@using ServerBlazorFC.Models
@using DonationLibrary.Donation
@inject ServerBlazorFC.DonationService DonationService
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

<h3>Update or Delete Donation</h3>
@if (id !=null && mode == "edit") //Update
{
    <EditForm Model="@donation" OnValidSubmit="@UpdateDonation">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="donor">Donor</label>
            <InputText id="donor" class="form-control" @bind-Value="donation.Donor" />
        </div>
        <div class="form-group">
            <label for="amount">Amount</label>
            <InputNumber id="amount" class="form-control" @bind-Value="donation.Amount" />
        </div>
        <div class="form-group">
            <label for="date">Date</label>
            <InputDate id="date" class="form-control" @bind-Value="donation.Date" />
        </div>
        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>
}
else if (id != null && mode == "delete") //Delete
{
    <h4>Are you sure you want to delete this donation?</h4>
    <button type="button" class="btn btn-danger" @onclick="DeleteDonation">Delete</button>
}
else
{
    <h4>Invalid donation</h4>
}

@code {
    [Parameter]
    public string? id { get; set; }
    [Parameter]
    public string? mode { get; set; }
    DonationLibrary.Donation donation = new DonationLibrary.Donation();

    protected override async Task OnInitializedAsync()
    {
        donation = await DonationService.GetDonationAsync(int.Parse(id));
    }

    private async Task UpdateDonation()
    {
        await DonationService.UpdateDonationAsync(donation);
        NavigationManager.NavigateTo("/donations");
    }

    private async Task DeleteDonation()
    {
        await DonationService.DeleteDonationAsync(int.Parse(id));
        NavigationManager.NavigateTo("/donations");
    }
}
```
